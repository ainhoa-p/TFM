# -*- coding: utf-8 -*-
"""TFM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mYsYNq0jCrCBbx95OIJ7tofHkv4hTHF6

# SISTEMA BASADO EN REGLAS
"""

from datetime import datetime, timedelta

def hora_en_franjas(hora: str, dia:str, franjas: list[tuple[str, str]], step_minutes=15) -> bool:
  #Verifica si una hora cae dentro de alguna franja dada, usando un paso en minutos.
    hora_obj = datetime.strptime(hora, "%H:%M")
    for inicio, fin in franjas:
        t = datetime.strptime(inicio, "%H:%M")
        end = datetime.strptime(fin, "%H:%M")
        while t <= end:
            if t.time() == hora_obj.time():
                return True
            t += timedelta(minutes=step_minutes)
    return False

def hora_en_franjas(hora: str, franjas: list[tuple[str, str]], step_minutes: int = 15) -> bool:
    """Devuelve True si la hora pertenece a alguna franja con saltos regulares."""
    formato = "%H:%M"
    hora_obj = datetime.strptime(hora, formato)
    for inicio, fin in franjas:
        t_inicio = datetime.strptime(inicio, formato)
        t_fin = datetime.strptime(fin, formato)
        while t_inicio < t_fin:
            if t_inicio == hora_obj:
                return True
            t_inicio += timedelta(minutes=step_minutes)
    return False

"""## SALA 7.MAMOGRAFÍA

### BAV por ETX
"""

def es_horario_bav_por_etx(hora: str, dia: str) -> bool:
    """Citas BAV por ETX:
    - Viernes: 08:45, 10:15, 11:15, 12:15
    - Lunes: 13:00
    """
    dia = dia.lower()
    if dia == "viernes":
        return hora in ["08:45", "10:15", "11:15", "12:15"]
    elif dia == "lunes":
        return hora == "13:00"
    else:
        return False

"""### Arpón por ETX"""

def es_horario_arpon(hora: str, dia: str) -> bool:
    """Arpones:
    - Solo los martes y jueves
    - Citas de 45 minutos entre 08:30 y 09:45
    """
    dia = dia.lower()
    if dia not in ["martes", "jueves"]:
        return False
    return hora in ["08:30", "09:15"]

"""### Tomografías estándar

Se aplican las condiciones de que solo se pueden añadir pacientes en los huecos de mamografía:
- los lunes si no hay una BAV de 13:00 a 14:00.
- los viernes si no hay BAV
"""

def es_horario_tx_mamografia(hora: str, dia: str, ocupado_bav: bool = False, ocupado_arpon: bool = False) -> bool:
    """Mamografía TX con restricciones según día y ocupación de BAV o Arpón."""
    dia = dia.lower()
    franjas = []

    if dia in ["lunes", "viernes"]:
        franjas = [("08:30", "10:45"), ("11:45", "13:15")]

        if dia == "lunes":
            if not ocupado_bav:
                franjas.append(("13:15", "13:45"))

        elif dia == "viernes":
            franjas.append(("13:15", "13:45"))

            if ocupado_bav:
                # Excluir franjas BAV por ETX del viernes: ["08:45", "10:15", "11:15", "12:15"]
                # Cada una dura 1 hora, por lo que eliminamos esos intervalos
                franjas_bav = [("08:45", "09:45"), ("10:15", "11:15"),
                               ("11:15", "12:15"), ("12:15", "13:15")]

                # Filtramos franjas para eliminar solapamientos con BAV
                def sin_solape(f1, f2):
                    return f1[1] <= f2[0] or f1[0] >= f2[1]

                franjas = [f for f in franjas
                           if all(sin_solape(f, b) for b in franjas_bav)]

    elif dia in ["martes", "jueves"]:
        if not ocupado_arpon:
            franjas = [("08:30", "10:45")]
        else:
            franjas = [("10:00", "10:45")]
        franjas.append(("12:00", "13:00"))

    return hora_en_franjas(hora, franjas, step_minutes=15)

"""### Mamografía con contraste"""

def es_horario_mamografia_con_contraste(hora: str, dia: str) -> bool:
    """
    Mamografía con contraste:
    - Solo miércoles
    - Citas de 45 minutos desde 08:45 a 13:45
    """
    dia = dia.lower()
    if dia != "miércoles":
        return False

    inicio = datetime.strptime("08:45", "%H:%M")
    fin = datetime.strptime("13:45", "%H:%M")

    while inicio < fin:
        if inicio.strftime("%H:%M") == hora:
            return True
        inicio += timedelta(minutes=45)

    return False

"""## ECOGRAFÍA"""

# --- ECOGRAFÍA ---

def es_horario_eco_prioritaria(hora: str) -> bool:
    """Lunes, Miércoles, Viernes. Cada 15 minutos en bloques."""
    franjas = [("09:30", "10:45"), ("11:30", "14:00")]
    return hora_en_franjas(hora, franjas, step_minutes=15)

def es_horario_bag_por_eco(hora: str) -> bool:
    """Martes/Jueves. Citas puntuales de 30 minutos."""
    return hora in ["09:30", "10:30", "11:30"]

def es_horario_eco_revaloracion(hora: str) -> bool:
    """Martes/Jueves. Citas puntuales de 30 minutos."""
    return hora in ["10:00", "11:00"]

def es_horario_eco_post_mamografia(hora: str) -> bool:
    """Martes/Jueves. Citas después de mamografía del mismo día."""
    return hora in ["12:30", "12:45"]

def es_horario_eco_normal(hora: str) -> bool:
    """Lunes. Ecos normales cada 15 min."""
    return hora_en_franjas(hora, [("09:00", "13:45")], step_minutes=15)

def es_horario_eco_con_contraste(hora: str) -> bool:
    """Lunes. Ecos con contraste cada 30 min."""
    return hora_en_franjas(hora, [("09:00", "13:45")], step_minutes=30)

"""## RESONANCIA MAGNÉTICA"""

# --- RESONANCIA MAGNÉTICA ---

def es_horario_rm(hora: str) -> bool:
    """Lunes. Citas puntuales de 1 hora."""
    return hora in ["08:45", "10:45", "12:45", "13:00"]